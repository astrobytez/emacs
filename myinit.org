* Initialisation file

#+OPTIONS: toc:nil

*Author*: Nicholas Hallam
*email*: nph@protonmail.com

** Setup emacs for package configuration

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Initial package used in configuration

Here we setup a list of packages to install for the configuration.
A helper function parses the list and installs the packages as requied.

#+BEGIN_SRC emacs-lisp
  (defvar user-packages-list '(org
                               magit
                               gist
                               markdown-mode
                               cider
                               undo-tree
                               browse-kill-ring
                               projectile
                               yasnippet
                               auto-complete
                               diminish
                               haskell-mode
                               slime))

  (defun user-packages-install ()
    (dolist (package user-packages-list)
      (use-package package :ensure t)))

  ;; install the package list
  (user-packages-install)
#+END_SRC

** Configure languages

Here we setup the languages we will set org mode to run
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((sh . t)
                               (C . t)
                               (python . t)
                               (clojure . t)))
#+END_SRC

*** Clojure configuration

Further to configuring clojure:

#+BEGIN_SRC emacs-lisp
  ;; configure org mode for clojure
  (require 'org)
  (require 'ob-clojure)

  ;; configure cider
  (setq org-babel-clojure-backend 'cider)
  (require 'cider)
#+END_SRC

** Configure Spelling

#+BEGIN_SRC emacs-lisp
  (require 'ispell)

  (setq ispell-dictionary "en_GB")

  (require 'flyspell)
#+END_SRC

** Configure theme

#+BEGIN_SRC emacs-lisp
  ;; load the misterioso theme
  (load-theme 'misterioso)
#+END_SRC
   
** Configure look and feel

Firstly we make special symbols resemble as characters.

#+BEGIN_SRC emacs-lisp
  ;; set symbols to be pretty
  (global-prettify-symbols-mode t)
#+END_SRC

Taken from [["http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html"][Org as a Word Processor]]


Firstly we may need to install org-bullets.

#+BEGIN_SRC emacs-lisp
  ;; install org-bullets if required
  (use-package org-bullets
    :ensure t)
#+END_SRC

Next lets do as the article shows.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (if (display-graphic-p)
      (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                                   ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                                   ((x-list-fonts "Verdana")         '(:font "Verdana"))
                                   ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                                   (nil
                                    (warn "Cannot find a Sans Serif Font.  Install Source Sans; Pro."))))
             (base-font-color     (face-foreground 'default nil 'default))
             (headline           `(:inherit default :weight bold :foreground ,base-font-color))))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
                            `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
                            `(org-document-title
                              ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
#+END_SRC
** Configure org mode
   
We find that export to pdf fails with an obtuse error in the default setup.
	=> /PDF file ./foo.pdf was not produced/
	=> Latex error.

A quick look on stack overflow uncovers https://stackoverflow.com/a/22158330
which in turn comes from https://gist.github.com/bradleywright/2046593

#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Sets the exec-path to the same value used by the user shell"
    (let ((path-from-shell
           (replace-regexp-in-string
            "[[:space:]\n]*$" ""
            (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+END_SRC

As per the instructions for configuring org mode export at: [[https://joat-programmer.blogspot.com.au/2013/07/org-mode-version-8-and-pdf-export-with.html][instructions]]

Interestingly none of these approaches worked and after some time found this fruitless.
However the article on [[orgmode.org/worg/org-dependencies.html][org dependencies]] suggests a different approach using texi2dvi in the 
=org-latex-pdf-process= command.

In any case we need pygments installed. The following will check if we have it first 
then install if necessary. It does however assume we have pip on the environment path.

#+BEGIN_SRC sh
  command -v pygmentize >/dev/null 2>&1 || { pip install pygments --user }
#+END_SRC

"C-h v" documentation for org-latex-listings and org-latex-packages-alist describe the 
following concepts also, the last two lines diverge and comes from the instructions 
discussed above in [[org dependencies]].

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process '("texi2dvi --pdf %f"))
  (setenv "PDFLATEX" "pdflatex --shell-escape")
#+END_SRC

Now lets configure org modes syntax highlighting, fonts and layout.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Default startup buffer

TODO fixme -- startup buffer doesn't work
#+BEGIN_SRC emacs-lisp
;;  (switch-to-buffer "*scratch*")
#+END_SRC

** ERC Configuration

Here we configure the ERC client for IRC chat

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/.ercrc.el")
#+END_SRC

* Ancillary

** GDB Debugging configuration

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows 1
        gdb-show-main 1)
#+END_SRC
