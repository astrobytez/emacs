#+TITLE: My Emacs Initialisation file
#+DATE: <2017-07-01 Sat>
#+AUTHOR: pheonix
#+EMAIL: engineer@ghost
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 25.2.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
* Initialisation file
** Configure Security

As per the article by [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][Arjen Wiersma]] on his emacs configuration we setup security.

#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'gnutls-available-p)
  ;;      (fmakunbound 'gnutls-available-p))

  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
   ;; (let ((bad-hosts
   ;;        (loop for bad
   ;;              in `("https://wrong.host.badssl.com/"
   ;;                   "https://self-signed.badssl.com/")
   ;;              if (condition-case e
   ;;                     (url-retrieve
   ;;                      bad (lambda (retrieved) t))
   ;;                   (error nil))
   ;;              collect bad)))
   ;;   (if bad-hosts
   ;;       (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
   ;;     (url-retrieve "https://badssl.com"
   ;;                   (lambda (retrieved) t))))
#+END_SRC
** Setup emacs for package configuration

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

** Initial package used in configuration

Setup a list of packages to install for the configuration.
A helper function parses the list and installs the packages as requied.

#+BEGIN_SRC emacs-lisp
  (defvar user-packages-list '(org
                               magit
                               gist
                               markdown-mode
                               cider
                               undo-tree
                               browse-kill-ring
                               projectile
                               yasnippet
                               auto-complete
                               diminish
                               haskell-mode
                               weechat
                               htmlize
                               org-bullets))

  (defun user-packages-install ()
    (dolist (package user-packages-list)
      (unless (package-installed-p package)
        (package-install package))))

  ;; install the package list
  (user-packages-install)
#+END_SRC

** Configure languages

Here we setup the languages we will set org mode to run
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((sh . t)
                               (C . t)
                               (python . t)
                               (clojure . t)))
#+END_SRC

*** Clojure configuration

Further to configuring clojure:

#+BEGIN_SRC emacs-lisp
  ;; configure org mode for clojure
  (require 'org)
  (require 'ob-clojure)

  ;; configure cider
  (setq org-babel-clojure-backend 'cider)
  (require 'cider)
#+END_SRC

** Configure autocompletion
#+BEGIN_SRC emacs-lisp
  (defun complete-string (source)
    (cond
     ((fboundp #'auto-complete) (auto-complete source))
     (t (dabbrev-expand source))))

  (defun smart-tab ()
    (interactive)
    (if (minibufferp)
        (unless (minibuffer-complete)
          (complete-string nil))
      (if mark-active
          (indent-region (region-beginning) (region-end))
        (if (looking-at "\\_>")
            (complete-string nil)
          (indent-for-tab-command)))))

  (ac-config-default)
  (global-set-key (kbd "TAB") #'smart-tab)
#+END_SRC
** Configure theme

#+BEGIN_SRC emacs-lisp
  ;; load the misterioso theme
  (load-theme 'misterioso)
#+END_SRC
   
** Configure look and feel

Firstly we make special symbols resemble as characters.

#+BEGIN_SRC emacs-lisp
  ;; set symbols to be pretty
  (global-prettify-symbols-mode t)
#+END_SRC

Taken from [["http://howardism.org/Technical/Emacs/orgmode-wordprocessor.html"][Org as a Word Processor]]

We switch based on whether we are in a graphical display and configure fonts and sizes appropriately.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (font-lock-add-keywords 'org-mode
                          '(("^ +\\([-*]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (if (display-graphic-p)
        (let* ((variable-tuple
                (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                      ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                      ((x-list-fonts "Verdana")         '(:font "Verdana"))
                      ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                      (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
          (custom-theme-set-faces 'user
            `(org-level-8 ((t (,@headline ,@variable-tuple))))
            `(org-level-7 ((t (,@headline ,@variable-tuple))))
            `(org-level-6 ((t (,@headline ,@variable-tuple))))
            `(org-level-5 ((t (,@headline ,@variable-tuple))))
            `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
            `(org-document-title
              ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))))
#+END_SRC

We want to use powerline terminal theme if possible

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)

  (require 'powerline)
  (powerline-default-theme)

#+END_SRC

** Configure org mode
   
We find that export to pdf fails with an obtuse error in the default setup.
	=> /PDF file ./foo.pdf was not produced/
	=> Latex error.

A quick look on stack overflow uncovers https://stackoverflow.com/a/22158330
which in turn comes from https://gist.github.com/bradleywright/2046593

#+BEGIN_SRC emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Sets the exec-path to the same value used by the user shell"
    (let ((path-from-shell
           (replace-regexp-in-string
            "[[:space:]\n]*$" ""
            (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+END_SRC

As per the instructions for configuring org mode export at: [[https://joat-programmer.blogspot.com.au/2013/07/org-mode-version-8-and-pdf-export-with.html][instructions]]

Interestingly none of these approaches worked and after some time found this fruitless.
However the article on [[orgmode.org/worg/org-dependencies.html][org dependencies]] suggests a different approach using texi2dvi in the 
=org-latex-pdf-process= command.

In any case we need pygments installed. The following will check if we have it first 
then install if necessary. It does however assume we have pip on the environment path.

#+BEGIN_SRC sh
  command -v pygmentize >/dev/null 2>&1 || { pip install pygments --user }
#+END_SRC

"C-h v" documentation for org-latex-listings and org-latex-packages-alist describe the 
following concepts also, the last two lines diverge and comes from the instructions 
discussed above in [[org dependencies]].

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-pdf-process '("texi2dvi --pdf %f"))
  (setenv "PDFLATEX" "pdflatex --shell-escape")
#+END_SRC

Now lets configure org modes syntax highlighting, fonts and layout.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Default startup buffer

TODO fixme -- create a startup buffer

** ERC Configuration

Here we configure the ERC client for IRC chat

#+BEGIN_SRC emacs-lisp
  ;; (load "~/.emacs.d/.ercrc.el")
#+END_SRC

* Ancillary

** GDB Debugging configuration

#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows 1
        gdb-show-main 1)
#+END_SRC
** Miscellaneous Stuff

Borrowing some more misc stuff from [[view-source:https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][Arjen Wiersma]].

#+BEGIN_SRC emacs-lisp
  ;; Custom binding for magit-status
  (use-package magit
    :config
    (global-set-key (kbd "C-c m") 'magit-status))

  ;; don't show the startup message
  (setq inhibit-startup-message t)

  ;; turn on line numbers
  ;; (global-linum-mode)

  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  ;; add a nice way to indent a buffer and clean up trailing whitespace
  (global-set-key (kbd "C-c n") 'iwb)

  ;; turn on parenthesis pair matching
  (electric-pair-mode t)
#+END_SRC
